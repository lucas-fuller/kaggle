{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d0cd76ea",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:01.883143Z",
     "iopub.status.busy": "2025-02-10T07:50:01.882537Z",
     "iopub.status.idle": "2025-02-10T07:50:03.043910Z",
     "shell.execute_reply": "2025-02-10T07:50:03.041787Z"
    },
    "papermill": {
     "duration": 1.199923,
     "end_time": "2025-02-10T07:50:03.046765",
     "exception": false,
     "start_time": "2025-02-10T07:50:01.846842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/models/scikitlearn/default/1/bag_of_words_vectorizer.pkl\n",
      "/kaggle/input/models/scikitlearn/default/1/bag_of_words_models.pkl\n",
      "/kaggle/input/models/scikitlearn/default/1/avg_word_vec_models.pkl\n",
      "/kaggle/input/models/scikitlearn/default/1/tfidf_models.pkl\n",
      "/kaggle/input/models/scikitlearn/default/1/tfidf_vectorizer.pkl\n",
      "/kaggle/input/nlp-getting-started/sample_submission.csv\n",
      "/kaggle/input/nlp-getting-started/train.csv\n",
      "/kaggle/input/nlp-getting-started/test.csv\n",
      "/kaggle/input/word2vec/GoogleNews-vectors-negative300.bin\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4d49a28",
   "metadata": {
    "papermill": {
     "duration": 0.011323,
     "end_time": "2025-02-10T07:50:03.068462",
     "exception": false,
     "start_time": "2025-02-10T07:50:03.057139",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Introduction\n",
    "In this notebook I will be investigating 3 different methods to prepare text data for use by traditional (non-deep learning) machine learning algorithms:\n",
    "* Bag of Words\n",
    "* TD-IDF\n",
    "* Average Word Vectors\n",
    "\n",
    "These preprocessing method will then be used to train 5 models types, and from that an ensemble model that attempts to predict whether a tweet is relating to a disaster.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed328f7d",
   "metadata": {
    "papermill": {
     "duration": 0.012444,
     "end_time": "2025-02-10T07:50:03.091792",
     "exception": false,
     "start_time": "2025-02-10T07:50:03.079348",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Import Libraries and Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e235006",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:03.114476Z",
     "iopub.status.busy": "2025-02-10T07:50:03.113902Z",
     "iopub.status.idle": "2025-02-10T07:50:20.941193Z",
     "shell.execute_reply": "2025-02-10T07:50:20.939985Z"
    },
    "papermill": {
     "duration": 17.841294,
     "end_time": "2025-02-10T07:50:20.943691",
     "exception": false,
     "start_time": "2025-02-10T07:50:03.102397",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import seaborn as sns\n",
    "sns.set_theme()\n",
    "\n",
    "from sklearn.metrics import accuracy_score, f1_score\n",
    "from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "from scipy.spatial.distance import cosine\n",
    "\n",
    "from nltk.tokenize import TweetTokenizer\n",
    "from nltk.corpus import stopwords \n",
    "from nltk.stem import WordNetLemmatizer\n",
    "import nltk\n",
    "\n",
    "import regex as re    \n",
    "\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "from warnings import simplefilter\n",
    "from sklearn.exceptions import ConvergenceWarning\n",
    "simplefilter(\"ignore\", category=ConvergenceWarning)\n",
    "\n",
    "import gensim\n",
    "import joblib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d7e8b31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:20.965872Z",
     "iopub.status.busy": "2025-02-10T07:50:20.965254Z",
     "iopub.status.idle": "2025-02-10T07:50:21.050289Z",
     "shell.execute_reply": "2025-02-10T07:50:21.049167Z"
    },
    "papermill": {
     "duration": 0.098954,
     "end_time": "2025-02-10T07:50:21.052991",
     "exception": false,
     "start_time": "2025-02-10T07:50:20.954037",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/nlp-getting-started/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/nlp-getting-started/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0d2771e7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:21.076010Z",
     "iopub.status.busy": "2025-02-10T07:50:21.075564Z",
     "iopub.status.idle": "2025-02-10T07:50:21.100055Z",
     "shell.execute_reply": "2025-02-10T07:50:21.098857Z"
    },
    "papermill": {
     "duration": 0.039115,
     "end_time": "2025-02-10T07:50:21.102640",
     "exception": false,
     "start_time": "2025-02-10T07:50:21.063525",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>keyword</th>\n",
       "      <th>location</th>\n",
       "      <th>text</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Our Deeds are the Reason of this #earthquake M...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Forest fire near La Ronge Sask. Canada</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>All residents asked to 'shelter in place' are ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>13,000 people receive #wildfires evacuation or...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Just got sent this photo from Ruby #Alaska as ...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id keyword location                                               text  \\\n",
       "0   1     NaN      NaN  Our Deeds are the Reason of this #earthquake M...   \n",
       "1   4     NaN      NaN             Forest fire near La Ronge Sask. Canada   \n",
       "2   5     NaN      NaN  All residents asked to 'shelter in place' are ...   \n",
       "3   6     NaN      NaN  13,000 people receive #wildfires evacuation or...   \n",
       "4   7     NaN      NaN  Just got sent this photo from Ruby #Alaska as ...   \n",
       "\n",
       "   target  \n",
       "0       1  \n",
       "1       1  \n",
       "2       1  \n",
       "3       1  \n",
       "4       1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1506690a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:21.125920Z",
     "iopub.status.busy": "2025-02-10T07:50:21.125489Z",
     "iopub.status.idle": "2025-02-10T07:50:21.130914Z",
     "shell.execute_reply": "2025-02-10T07:50:21.129632Z"
    },
    "papermill": {
     "duration": 0.019575,
     "end_time": "2025-02-10T07:50:21.133439",
     "exception": false,
     "start_time": "2025-02-10T07:50:21.113864",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Global Variables\n",
    "file_path = '/kaggle/input/models/scikitlearn/default/1/'\n",
    "cv = 3\n",
    "n_iter = 10\n",
    "enforce_train = False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d11b57dc",
   "metadata": {
    "papermill": {
     "duration": 0.010622,
     "end_time": "2025-02-10T07:50:21.155518",
     "exception": false,
     "start_time": "2025-02-10T07:50:21.144896",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create Preprocessor\n",
    "Our Preproccessor will follow fairly standard preprocessing steps\n",
    "* Tokenization\n",
    "* Removing Punctuation\n",
    "* Removing Stop Words\n",
    "* Removing non alpha-numeric words\n",
    "* Lemmatizing\n",
    "* Removing URLs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bb8e595a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:21.179065Z",
     "iopub.status.busy": "2025-02-10T07:50:21.178666Z",
     "iopub.status.idle": "2025-02-10T07:50:22.797937Z",
     "shell.execute_reply": "2025-02-10T07:50:22.796515Z"
    },
    "papermill": {
     "duration": 1.634643,
     "end_time": "2025-02-10T07:50:22.800675",
     "exception": false,
     "start_time": "2025-02-10T07:50:21.166032",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Archive:  /usr/share/nltk_data/corpora/wordnet.zip\r\n",
      "   creating: /usr/share/nltk_data/corpora/wordnet/\r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/lexnames  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.verb  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.adv  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/adv.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.verb  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/cntlist.rev  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.adj  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.adj  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/LICENSE  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/citation.bib  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/noun.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/verb.exc  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/README  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.sense  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.noun  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/data.adv  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/index.noun  \r\n",
      "  inflating: /usr/share/nltk_data/corpora/wordnet/adj.exc  \r\n"
     ]
    }
   ],
   "source": [
    "!unzip /usr/share/nltk_data/corpora/wordnet.zip -d /usr/share/nltk_data/corpora/"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bf59ad7",
   "metadata": {
    "papermill": {
     "duration": 0.010268,
     "end_time": "2025-02-10T07:50:22.821449",
     "exception": false,
     "start_time": "2025-02-10T07:50:22.811181",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Create Preprocesser"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bbb261fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:22.845740Z",
     "iopub.status.busy": "2025-02-10T07:50:22.845241Z",
     "iopub.status.idle": "2025-02-10T07:50:22.857252Z",
     "shell.execute_reply": "2025-02-10T07:50:22.855778Z"
    },
    "papermill": {
     "duration": 0.027119,
     "end_time": "2025-02-10T07:50:22.859700",
     "exception": false,
     "start_time": "2025-02-10T07:50:22.832581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class text_preprocessing_NLTK():\n",
    "   \n",
    "    def __init__(self, regex_pattern_match):\n",
    "\n",
    "        self.tokenizer = TweetTokenizer(preserve_case=False)\n",
    "        self.lemmatizer = WordNetLemmatizer()\n",
    "        self.regex_pattern = re.compile(regex_pattern_match)\n",
    "        self.url_regex_pattern = re.compile(r'https?[^ ]+')\n",
    "        \n",
    "        self.train_tokenized_text = []\n",
    "        self.train_sentence_text = []\n",
    "        \n",
    "        self.test_tokenized_text = []\n",
    "        self.test_sentence_text = []\n",
    "        \n",
    "    def transform(self, text, train=True):\n",
    "        # Tokenize\n",
    "        text = [self.tokenizer.tokenize(sentence) for sentence in text] \n",
    "        # Remove Punctuation\n",
    "        text = [[re.sub(r'[^\\w\\s]', '', token) for token in sentence] for sentence in text]\n",
    "        # stop words\n",
    "        text = [[token for token in sentence if token not in stopwords.words('english')] for sentence in text]\n",
    "        # remove non words\n",
    "        text = [[token for token in sentence if bool(self.regex_pattern.search(token))] for sentence in text]\n",
    "        # lemmatize words\n",
    "        text = [[self.lemmatizer.lemmatize(token) for token in sentence] for sentence in text] \n",
    "        # remove URLs\n",
    "        text = [[token for token in sentence if not bool(self.url_regex_pattern.search(token))] for sentence in text]\n",
    "\n",
    "        if train:\n",
    "            self.train_tokenized_text = text\n",
    "            self.train_sentence_text = [' '.join(sentence) for sentence in text]\n",
    "        else:\n",
    "            self.test_tokenized_text = text\n",
    "            self.test_sentence_text = [' '.join(sentence) for sentence in text]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "37e289d2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:22.883014Z",
     "iopub.status.busy": "2025-02-10T07:50:22.882573Z",
     "iopub.status.idle": "2025-02-10T07:50:22.889448Z",
     "shell.execute_reply": "2025-02-10T07:50:22.888245Z"
    },
    "papermill": {
     "duration": 0.021576,
     "end_time": "2025-02-10T07:50:22.891713",
     "exception": false,
     "start_time": "2025-02-10T07:50:22.870137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preprocessor = text_preprocessing_NLTK(regex_pattern_match='[a-zA-Z0-9]')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8e4605f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:22.914715Z",
     "iopub.status.busy": "2025-02-10T07:50:22.914271Z",
     "iopub.status.idle": "2025-02-10T07:50:41.200962Z",
     "shell.execute_reply": "2025-02-10T07:50:41.199696Z"
    },
    "papermill": {
     "duration": 18.301441,
     "end_time": "2025-02-10T07:50:41.203998",
     "exception": false,
     "start_time": "2025-02-10T07:50:22.902557",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preprocessor.transform(train['text'], train=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3acc1365",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.227593Z",
     "iopub.status.busy": "2025-02-10T07:50:41.227217Z",
     "iopub.status.idle": "2025-02-10T07:50:41.236468Z",
     "shell.execute_reply": "2025-02-10T07:50:41.235097Z"
    },
    "papermill": {
     "duration": 0.024126,
     "end_time": "2025-02-10T07:50:41.238898",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.214772",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['tokens'] = preprocessor.train_tokenized_text\n",
    "train['token_sentence'] = preprocessor.train_sentence_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4c9452e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.261672Z",
     "iopub.status.busy": "2025-02-10T07:50:41.261220Z",
     "iopub.status.idle": "2025-02-10T07:50:41.268245Z",
     "shell.execute_reply": "2025-02-10T07:50:41.266946Z"
    },
    "papermill": {
     "duration": 0.021352,
     "end_time": "2025-02-10T07:50:41.270707",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.249355",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0: Our Deeds are the Reason of this #earthquake May ALLAH Forgive us all\n",
      "0: ['deed', 'reason', 'earthquake', 'may', 'allah', 'forgive', 'u']\n",
      "1: Forest fire near La Ronge Sask. Canada\n",
      "1: ['forest', 'fire', 'near', 'la', 'ronge', 'sask', 'canada']\n",
      "2: All residents asked to 'shelter in place' are being notified by officers. No other evacuation or shelter in place orders are expected\n",
      "2: ['resident', 'asked', 'shelter', 'place', 'notified', 'officer', 'evacuation', 'shelter', 'place', 'order', 'expected']\n",
      "3: 13,000 people receive #wildfires evacuation orders in California \n",
      "3: ['13000', 'people', 'receive', 'wildfire', 'evacuation', 'order', 'california']\n",
      "4: Just got sent this photo from Ruby #Alaska as smoke from #wildfires pours into a school \n",
      "4: ['got', 'sent', 'photo', 'ruby', 'alaska', 'smoke', 'wildfire', 'pours', 'school']\n",
      "5: #RockyFire Update => California Hwy. 20 closed in both directions due to Lake County fire - #CAfire #wildfires\n",
      "5: ['rockyfire', 'update', 'california', 'hwy', '20', 'closed', 'direction', 'due', 'lake', 'county', 'fire', 'cafire', 'wildfire']\n",
      "6: #flood #disaster Heavy rain causes flash flooding of streets in Manitou, Colorado Springs areas\n",
      "6: ['flood', 'disaster', 'heavy', 'rain', 'cause', 'flash', 'flooding', 'street', 'manitou', 'colorado', 'spring', 'area']\n",
      "7: I'm on top of the hill and I can see a fire in the woods...\n",
      "7: ['im', 'top', 'hill', 'see', 'fire', 'wood']\n",
      "8: There's an emergency evacuation happening now in the building across the street\n",
      "8: ['there', 'emergency', 'evacuation', 'happening', 'building', 'across', 'street']\n",
      "9: I'm afraid that the tornado is coming to our area...\n",
      "9: ['im', 'afraid', 'tornado', 'coming', 'area']\n"
     ]
    }
   ],
   "source": [
    "for n in range(10):\n",
    "    print(f'{n}: {train.text[n]}')\n",
    "    print(f'{n}: {train.tokens[n]}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "046118a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.293558Z",
     "iopub.status.busy": "2025-02-10T07:50:41.293100Z",
     "iopub.status.idle": "2025-02-10T07:50:41.307598Z",
     "shell.execute_reply": "2025-02-10T07:50:41.306390Z"
    },
    "papermill": {
     "duration": 0.028764,
     "end_time": "2025-02-10T07:50:41.310135",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.281371",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train_raw, X_test_raw, y_train, y_test = train_test_split(train['token_sentence'], train['target'].values, test_size=0.2, random_state=123)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab400aa0",
   "metadata": {
    "papermill": {
     "duration": 0.010109,
     "end_time": "2025-02-10T07:50:41.330644",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.320535",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create Bag of Words Model\n",
    "This text model preparation method involves creating a vocabulary of words (the length controlled by max_features) and, for each piece of text, assigning a value for each word corresponding to how many times a given word in present in the text.\n",
    "\n",
    "From this the ML models can learn which words, and with what frequency given words appear in tweets corresponding to disaster tweets, and non-disaster tweets.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "07254ab0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.353440Z",
     "iopub.status.busy": "2025-02-10T07:50:41.353041Z",
     "iopub.status.idle": "2025-02-10T07:50:41.360687Z",
     "shell.execute_reply": "2025-02-10T07:50:41.359221Z"
    },
    "papermill": {
     "duration": 0.022207,
     "end_time": "2025-02-10T07:50:41.363255",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.341048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def create_vectorizer(vectorizer_name, vectorizer, X_train_raw, X_test_raw):\n",
    "\n",
    "    if os.path.isfile(f'{file_path}{vectorizer_name}.pkl') and enforce_train==False:\n",
    "        vectorizer = joblib.load(f'{file_path}{vectorizer_name}.pkl')\n",
    "\n",
    "    else:\n",
    "        vectorizer.fit(X_train_raw.values)\n",
    "        joblib.dump(vectorizer, f'{vectorizer_name}.pkl')\n",
    "\n",
    "    X_train_vec = vectorizer.transform(X_train_raw.values).toarray()\n",
    "    X_test_vec = vectorizer.transform(X_test_raw.values).toarray()\n",
    "        \n",
    "    return vectorizer, X_train_vec, X_test_vec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "48e588e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.388272Z",
     "iopub.status.busy": "2025-02-10T07:50:41.387868Z",
     "iopub.status.idle": "2025-02-10T07:50:41.633263Z",
     "shell.execute_reply": "2025-02-10T07:50:41.632029Z"
    },
    "papermill": {
     "duration": 0.261262,
     "end_time": "2025-02-10T07:50:41.636269",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.375007",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "bow_vectorizer_name = 'bag_of_words_vectorizer'\n",
    "bow_vectorizer = CountVectorizer(max_features=2000)\n",
    "\n",
    "bow_vectorizer, X_train_bow, X_test_bow = create_vectorizer(bow_vectorizer_name, bow_vectorizer, X_train_raw, X_test_raw) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9d35247c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.668706Z",
     "iopub.status.busy": "2025-02-10T07:50:41.668257Z",
     "iopub.status.idle": "2025-02-10T07:50:41.679181Z",
     "shell.execute_reply": "2025-02-10T07:50:41.677714Z"
    },
    "papermill": {
     "duration": 0.034398,
     "end_time": "2025-02-10T07:50:41.681549",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.647151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "models = {\n",
    "    \n",
    "    'Logistic Regression': [LogisticRegression(penalty='elasticnet', solver='saga')\n",
    "                                  , {'C': [0.01, 0.1, 1, 10]\n",
    "                                     ,'l1_ratio': [0, 0.1, 0.3, 0.5, 0.7, 0.9, 1]\n",
    "                                     ,'max_iter': [100, 200, 500]\n",
    "                                    }\n",
    "                           ]\n",
    "    ,'Random Forest': [RandomForestClassifier()\n",
    "                                  , {'n_estimators': [10, 50, 100, 200]\n",
    "                                     ,'min_samples_leaf': [1, 5, 10, 25]\n",
    "                                     ,'min_samples_split': [2, 10, 20, 50]\n",
    "                                     ,'max_depth': [10, 50, 100, 200]\n",
    "                                    }\n",
    "                      ]\n",
    "    ,'XGBoost': \t[XGBClassifier()\n",
    "                                  , {'n_estimators': [100, 500, 1000]\n",
    "                                     ,'max_depth': [10, 50, 100, 200]\n",
    "                                     ,'eta': [0.01, 0.05, 0.1, 0,2]\n",
    "                                     ,'colsample_bytree': [0.5, 0.75, 1]\n",
    "                                      ,'alpha': [0,40, 100, 150, 50]\n",
    "                                    }\n",
    "                    ]\n",
    "    ,'SVM':       [SVC()\n",
    "                        ,{'C': [0.001, 0.01, 0.1, 1, 10, 100]\n",
    "                          ,'gamma':  [0.001, 0.01, 0.1, 1]\n",
    "                         }\n",
    "                  ]\n",
    "    ,'Naive Bayes': [MultinomialNB()\n",
    "                        ,{'alpha': [0.001, 0.01, 0.1, 1]}\n",
    "                    ]\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f8a265e2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.704705Z",
     "iopub.status.busy": "2025-02-10T07:50:41.704274Z",
     "iopub.status.idle": "2025-02-10T07:50:41.712191Z",
     "shell.execute_reply": "2025-02-10T07:50:41.711090Z"
    },
    "papermill": {
     "duration": 0.022193,
     "end_time": "2025-02-10T07:50:41.714526",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.692333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def return_trained_model(model_name, training_type='hyperparamter_tuning'):\n",
    "    \n",
    "    models = joblib.load(f'{file_path}{model_name}.pkl')\n",
    "    \n",
    "    if training_type == 'hyperparamter_tuning':\n",
    "        models = models.drop('Ensemble Model', axis=0)\n",
    "        for index, row in models.iterrows():\n",
    "           \n",
    "            print(index)\n",
    "            print(f'Best CV f1 Score: {row.cv_f1:.3f}')\n",
    "            print(f'Test Set Accuracy Score: {row.test_accuracy:.3f}')\n",
    "            print(f'Test Set F1 Score: {row.test_f1:.3f}\\n')\n",
    "        return models\n",
    "\n",
    "        \n",
    "    elif training_type == 'ensemble_training':\n",
    "        for index, row in models.loc[['Ensemble Model'], :].iterrows():\n",
    "        \n",
    "            print(index)\n",
    "            print(f'Test Set Accuracy Score: {row.test_accuracy:.3f}')\n",
    "            print(f'Test Set F1 Score: {row.test_f1:.3f}\\n')          \n",
    "        return models\n",
    "\n",
    "    else:\n",
    "        print('No trained Model Found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0ed0a65f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.740605Z",
     "iopub.status.busy": "2025-02-10T07:50:41.738971Z",
     "iopub.status.idle": "2025-02-10T07:50:41.749289Z",
     "shell.execute_reply": "2025-02-10T07:50:41.748154Z"
    },
    "papermill": {
     "duration": 0.026527,
     "end_time": "2025-02-10T07:50:41.751736",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.725209",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def model_hyperparamter_tuning(models, model_name, X_train, X_test, y_train, y_test, cv=cv, n_iter=n_iter):\n",
    "\n",
    "    if os.path.isfile(f'{file_path}{model_name}.pkl') and enforce_train==False:\n",
    "        models = return_trained_model(model_name, 'hyperparamter_tuning')\n",
    "        return models\n",
    "        \n",
    "    model_stats = []\n",
    "    \n",
    "    for model_name, model_def in models.items():\n",
    "\n",
    "        print(model_name)\n",
    "        \n",
    "        model = model_def[0]\n",
    "        params =  model_def[1]\n",
    "        \n",
    "        clf = RandomizedSearchCV(model, params, scoring ='f1', cv=cv, verbose=1, n_iter=n_iter)\n",
    "        \n",
    "        search = clf.fit(X_train, y_train)\n",
    "        best_model = search.best_estimator_\n",
    "        best_params = search.best_params_\n",
    "        best_score = search.best_score_\n",
    "    \n",
    "        print(f'Best CV f1 Score: {best_score:.3f}')\n",
    "    \n",
    "        \n",
    "        predictions = best_model.predict(X_test)\n",
    "        accuracy = accuracy_score(y_test, predictions)\n",
    "        f1 = f1_score(y_test, predictions)\n",
    "\n",
    "        model_stats.append([model_name, best_model, best_params, best_score, accuracy, f1])\n",
    "        \n",
    "        print(f'Test Set Accuracy Score: {accuracy:.3f}')\n",
    "        print(f'Test Set F1 Score: {f1:.3f}\\n')\n",
    "\n",
    "    models = pd.DataFrame(model_stats, columns = ['model_name', 'model', 'model_params', 'cv_f1', 'test_accuracy', 'test_f1']).set_index('model_name')\n",
    "\n",
    "    return models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "694bad21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:41.774517Z",
     "iopub.status.busy": "2025-02-10T07:50:41.774096Z",
     "iopub.status.idle": "2025-02-10T07:50:42.745259Z",
     "shell.execute_reply": "2025-02-10T07:50:42.743498Z"
    },
    "papermill": {
     "duration": 0.98593,
     "end_time": "2025-02-10T07:50:42.748203",
     "exception": false,
     "start_time": "2025-02-10T07:50:41.762273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression\n",
      "Best CV f1 Score: 0.736\n",
      "Test Set Accuracy Score: 0.802\n",
      "Test Set F1 Score: 0.746\n",
      "\n",
      "Random Forest\n",
      "Best CV f1 Score: 0.732\n",
      "Test Set Accuracy Score: 0.794\n",
      "Test Set F1 Score: 0.741\n",
      "\n",
      "XGBoost\n",
      "Best CV f1 Score: 0.719\n",
      "Test Set Accuracy Score: 0.793\n",
      "Test Set F1 Score: 0.726\n",
      "\n",
      "SVM\n",
      "Best CV f1 Score: 0.731\n",
      "Test Set Accuracy Score: 0.804\n",
      "Test Set F1 Score: 0.746\n",
      "\n",
      "Naive Bayes\n",
      "Best CV f1 Score: 0.741\n",
      "Test Set Accuracy Score: 0.802\n",
      "Test Set F1 Score: 0.747\n",
      "\n"
     ]
    }
   ],
   "source": [
    "bag_of_words_model_name = 'bag_of_words_models'\n",
    "bag_of_words_models = model_hyperparamter_tuning(models, bag_of_words_model_name, X_train_bow, X_test_bow, y_train, y_test, cv=cv, n_iter=n_iter)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab274878",
   "metadata": {
    "papermill": {
     "duration": 0.010643,
     "end_time": "2025-02-10T07:50:42.769491",
     "exception": false,
     "start_time": "2025-02-10T07:50:42.758848",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Create Ensemble model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3b22e806",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:42.792273Z",
     "iopub.status.busy": "2025-02-10T07:50:42.791886Z",
     "iopub.status.idle": "2025-02-10T07:50:42.848216Z",
     "shell.execute_reply": "2025-02-10T07:50:42.846822Z"
    },
    "papermill": {
     "duration": 0.070808,
     "end_time": "2025-02-10T07:50:42.850825",
     "exception": false,
     "start_time": "2025-02-10T07:50:42.780017",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>model_params</th>\n",
       "      <th>cv_f1</th>\n",
       "      <th>test_accuracy</th>\n",
       "      <th>test_f1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>LogisticRegression(C=1, l1_ratio=0, max_iter=2...</td>\n",
       "      <td>{'max_iter': 200, 'l1_ratio': 0, 'C': 1}</td>\n",
       "      <td>0.736294</td>\n",
       "      <td>0.801707</td>\n",
       "      <td>0.746218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>(DecisionTreeClassifier(max_depth=200, max_fea...</td>\n",
       "      <td>{'n_estimators': 50, 'min_samples_split': 20, ...</td>\n",
       "      <td>0.731546</td>\n",
       "      <td>0.793828</td>\n",
       "      <td>0.740924</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>XGBClassifier(alpha=0, base_score=None, booste...</td>\n",
       "      <td>{'n_estimators': 100, 'max_depth': 50, 'eta': ...</td>\n",
       "      <td>0.718906</td>\n",
       "      <td>0.793171</td>\n",
       "      <td>0.725849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>SVC(C=10, gamma=0.01)</td>\n",
       "      <td>{'gamma': 0.01, 'C': 10}</td>\n",
       "      <td>0.731002</td>\n",
       "      <td>0.804334</td>\n",
       "      <td>0.746167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naive Bayes</th>\n",
       "      <td>MultinomialNB(alpha=1)</td>\n",
       "      <td>{'alpha': 1}</td>\n",
       "      <td>0.741426</td>\n",
       "      <td>0.801707</td>\n",
       "      <td>0.747069</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 model  \\\n",
       "model_name                                                               \n",
       "Logistic Regression  LogisticRegression(C=1, l1_ratio=0, max_iter=2...   \n",
       "Random Forest        (DecisionTreeClassifier(max_depth=200, max_fea...   \n",
       "XGBoost              XGBClassifier(alpha=0, base_score=None, booste...   \n",
       "SVM                                              SVC(C=10, gamma=0.01)   \n",
       "Naive Bayes                                     MultinomialNB(alpha=1)   \n",
       "\n",
       "                                                          model_params  \\\n",
       "model_name                                                               \n",
       "Logistic Regression           {'max_iter': 200, 'l1_ratio': 0, 'C': 1}   \n",
       "Random Forest        {'n_estimators': 50, 'min_samples_split': 20, ...   \n",
       "XGBoost              {'n_estimators': 100, 'max_depth': 50, 'eta': ...   \n",
       "SVM                                           {'gamma': 0.01, 'C': 10}   \n",
       "Naive Bayes                                               {'alpha': 1}   \n",
       "\n",
       "                        cv_f1  test_accuracy   test_f1  \n",
       "model_name                                              \n",
       "Logistic Regression  0.736294       0.801707  0.746218  \n",
       "Random Forest        0.731546       0.793828  0.740924  \n",
       "XGBoost              0.718906       0.793171  0.725849  \n",
       "SVM                  0.731002       0.804334  0.746167  \n",
       "Naive Bayes          0.741426       0.801707  0.747069  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bag_of_words_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1ce2c03d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:42.874709Z",
     "iopub.status.busy": "2025-02-10T07:50:42.874277Z",
     "iopub.status.idle": "2025-02-10T07:50:42.882731Z",
     "shell.execute_reply": "2025-02-10T07:50:42.881529Z"
    },
    "papermill": {
     "duration": 0.02291,
     "end_time": "2025-02-10T07:50:42.884965",
     "exception": false,
     "start_time": "2025-02-10T07:50:42.862055",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train_ensemble(models, model_name, X_train ,X_test, y_train, y_test, voting='hard'):\n",
    "\n",
    "    if os.path.isfile(f'{file_path}{model_name}.pkl') and enforce_train==False:\n",
    "        models = return_trained_model(model_name, 'ensemble_training')\n",
    "        return models\n",
    "    \n",
    "    else:\n",
    "        ensemble_models = [(model_name, model_stats['model']) for model_name, model_stats in models.iterrows()]\n",
    "    \n",
    "        ensemble_model = VotingClassifier(estimators = ensemble_models\n",
    "                          , voting='hard')\n",
    "    \n",
    "        ensemble_model.fit(X_train, y_train)\n",
    "        predictions = ensemble_model.predict(X_test)\n",
    "        \n",
    "        accuracy = accuracy_score(y_test, predictions)\n",
    "        f1 = f1_score(y_test, predictions)\n",
    "        print(f'Test Set Accuracy Score: {accuracy:.3f}')\n",
    "        print(f'Test Set F1 Score: {f1:.3f}')\n",
    "    \n",
    "    \n",
    "        models.loc['Ensemble Model'] = [ensemble_model, '-', '-', accuracy, f1]\n",
    "    \n",
    "        joblib.dump(models, f'{model_name}.pkl')\n",
    "        \n",
    "        return models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "99516c3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:42.908461Z",
     "iopub.status.busy": "2025-02-10T07:50:42.908057Z",
     "iopub.status.idle": "2025-02-10T07:50:43.289132Z",
     "shell.execute_reply": "2025-02-10T07:50:43.288061Z"
    },
    "papermill": {
     "duration": 0.395783,
     "end_time": "2025-02-10T07:50:43.291743",
     "exception": false,
     "start_time": "2025-02-10T07:50:42.895960",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ensemble Model\n",
      "Test Set Accuracy Score: 0.812\n",
      "Test Set F1 Score: 0.755\n",
      "\n"
     ]
    }
   ],
   "source": [
    "bag_of_words_models = train_ensemble(bag_of_words_models, bag_of_words_model_name, X_train_bow, X_test_bow, y_train, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1074f3f8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:43.316572Z",
     "iopub.status.busy": "2025-02-10T07:50:43.316183Z",
     "iopub.status.idle": "2025-02-10T07:50:43.323537Z",
     "shell.execute_reply": "2025-02-10T07:50:43.322363Z"
    },
    "papermill": {
     "duration": 0.022468,
     "end_time": "2025-02-10T07:50:43.325989",
     "exception": false,
     "start_time": "2025-02-10T07:50:43.303521",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_linear_regression_weights(vectorizer_name, vectorizer, models):\n",
    "\n",
    "    linear_regression_weights = pd.DataFrame({'vocabulary': vectorizer.get_feature_names_out()\n",
    "             ,'logistic_regression_weights': models.loc['Logistic Regression', 'model'].coef_[0]\n",
    "             }).sort_values(by='logistic_regression_weights')\n",
    "\n",
    "    top_bottom_10_slice = list(range(10)) + list(range(-10,0,1))\n",
    "\n",
    "    sns.barplot(data=linear_regression_weights.iloc[top_bottom_10_slice], y='vocabulary', x='logistic_regression_weights', orient=\"h\")\n",
    "    plt.title(f'Highest and Lowest Linear Regression Weight Words using {vectorizer_name}')\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dbf89b8",
   "metadata": {
    "papermill": {
     "duration": 0.010822,
     "end_time": "2025-02-10T07:50:43.347888",
     "exception": false,
     "start_time": "2025-02-10T07:50:43.337066",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The below shows what words in the BOW vocabulary that the Logistic Regression model in the ensemble gives the highest positive and negative weights. \n",
    "\n",
    "Words such as \"earthquake\" and \"wildfire\" have a large positive weight and so push the prediction to predicting a disaster, whereas words such as \"ebay\" or \"bag\" have large negative weights so do the opposite. \n",
    "\n",
    "It's worth noting the largest negative weights have a lower absolute value than positive weights. This is likely because certain words make a tweet very likely to be a disaster tweet, but it's harder to classify a tweet as a non-disaster tweet based on the presence of others.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2051163d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:43.371930Z",
     "iopub.status.busy": "2025-02-10T07:50:43.371536Z",
     "iopub.status.idle": "2025-02-10T07:50:43.912792Z",
     "shell.execute_reply": "2025-02-10T07:50:43.911416Z"
    },
    "papermill": {
     "duration": 0.556332,
     "end_time": "2025-02-10T07:50:43.915427",
     "exception": false,
     "start_time": "2025-02-10T07:50:43.359095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAuQAAAHPCAYAAAAbJ88NAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAC4fklEQVR4nOzdd1gUV/vw8e/uAop0BI2xN9aGoGDBLqjYo8RYYo1dYpckqImJ0cRuLGhijC0SE7uxxJ4nxsSS2KLGEnsXC92CsDvvH77MzxVUwIWl3J/r8pI9c2bmPrO7M/eeOTOjURRFQQghhBBCCGERWksHIIQQQgghRF4mCbkQQgghhBAWJAm5EEIIIYQQFiQJuRBCCCGEEBYkCbkQQgghhBAWJAm5EEIIIYQQFiQJuRBCCCGEEBYkCbkQQgghhBAWJAm5EEIIIYQQFpTjE3J/f39CQ0MzPO+AAQPMHFHOpdfrmTt3rqXDyPHWrVuHXq/n+vXrlg5FvIbX2bfkBKGhofj7+2d43mrVqpk5ouzr+vXr6PV61q1bZ+lQTBw8eBC9Xs/BgwezfN1z585Fr9cTGRmZ5es2t++++46AgAAqVqzIW2+9ZelwMsSSn4Wcpnv37nTv3t3SYaSQrRLy5ETmxIkTqU7v3r07rVu3zuKozOv8+fPMnTs3xyZryQemRYsWWToUszhy5Ahz584lNjY2TfXzQiLSvXt39Hq9+q9q1aq0adOGpUuXYjQaLR1ervbLL7+g1+vZuXNnimlt27ZFr9dz4MCBFNMaNWpE586dsyLEdHn06BFz585NU5Jw/Phx9Ho9S5cuTTFt0KBB6PV61q5dm2Ja165dqV+/vjnCFXnQH3/8wbRp06hevTqTJk1i5MiRlg4pz8vpeVJGWVk6gNe1bds2NBqNpcNIs/PnzxMWFkbNmjUpVqyYpcPJ844ePUpYWBjt27fH0dHRLMt86623aNWqFTY2NmZZniW88cYb6oEpKiqKzZs3M2nSJKKiohgxYoSFo8salti3+Pj4AHD48GGaNm2qlsfHx3Pu3DmsrKw4cuQItWvXVqfdunWLW7du0bJly3Sta8KECSiKYp7AX+DRo0eEhYUxePBgatWq9dK6lSpVwtbWlsOHD9OrVy+TaUePHlXb/vbbb6vlT5484cSJEzRu3Dgzws/2atSowfHjx7G2trZ0KDnWgQMH0Gq1fPHFFzl6n52bZHaelF07FHN8Qi5fIJHd6HQ6dDqdpcN4IaPRSGJiIvny5XthHQcHB5NTt126dKFFixYsX76coUOHZmn7EhISsLa2RqvN2hN6lti3FC5cmGLFinH48GGT8qNHj6IoCs2bN08xLfl1cjKfVtktibOysqJq1aocOXLEpPzixYtERUXRunXrFG3/999/SUhISHfbU/Po0SNsbW1fezlZSavVvvR7LF7t/v375M+fP9vnEoqikJCQQP78+S0dSo6V/B3P6vc6rcewbDVkJSNSG+d55swZunXrRtWqVWnQoAHz589n7dq1LxzXe+jQITp06ICnpycBAQFs2LAhRZ3Y2Fi++OILGjZsSJUqVWjatCnffvttilP4W7ZsISgoiGrVqlG9enXatGnDsmXLgKdDcoYNGwZAjx491CEBLzude+bMGUJDQwkICMDT05O6desyevRooqKiTOolj+e7cuUKoaGh+Pr64uPjw+jRo3n06JFJ3SdPnvDll19Su3ZtqlWrxsCBA7l9+/aLN3IG3L9/nzFjxlCnTh08PT1p27Yt69evN6nTvn17Bg8ebFLWpk0b9Ho9Z86cUcuST+NfuHBBLYuIiGD06NHUqVOHKlWq0KpVK9asWZMijuXLl9OqVSu8vLyoUaMGQUFBbNq0CXi6zaZOnQpAQECA+n687mmy1MaQJ1+vYM7P2qJFi+jcuTO1atWiatWqBAUFsW3bthTL0+v1fP7552zcuJFWrVrh6enJ3r1709WmfPnyUaVKFR48eMD9+/dNpv38888EBQVRtWpVatasyYgRI7h161aKZfzwww8EBARQtWpVOnTowKFDh1KM5UseB7llyxa++uor6tevj5eXF/Hx8QD8888/9OnTBx8fH7y8vOjWrVuKJC0+Pp4vvvgCf39/qlSpgp+fH++99x7//vuvWufy5csMGTKEunXr4unpSYMGDRgxYgRxcXFqndT2LdeuXWPo0KHUrFkTLy8vOnbsyG+//WZSJ7kNv/zyC19//TUNGjTA09OTnj17cuXKlVduax8fH06fPs3jx4/VsiNHjlC+fHnq16/PP//8Y/JZOHLkCBqNhurVq6frPUltDHlUVBQffPAB1atXx9fXl48++ogzZ868cPx0REQEwcHBVKtWjdq1azNlyhQMBgPwdHibn58fAGFhYer362XXqfj4+HDv3j2T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Vaum+mY5OTmlGDv9vBs3buDt7Z2ivESJEqnWL1KkSKrreXYne+XKFc6ePauOh3xe8vCad999l61bt9KvXz8KFy5M3bp1adGiBQ0aNHhpzC8THR1NWFgYv/zyS4qxu6mNA3vzzTdNXiefno6JicHe3p4bN26g1WpTbI/k00LmcOPGDUqWLJniAobkU043b94EwM3NjVKlSnHo0CE6d+7M4cOHqVWrFr6+vkyYMIFr165x4cIFjEajmnBERkYSGxvLypUrWblyZarrT34/+vXrx759+3jnnXcoWbIkdevWpXXr1ma5ACwjzPlZA/jf//7H119/zenTp03GD6a2U0vvKfSiRYsyceJEjEYjV69e5ZtvviEqKsrkArLLly+jKArNmjVLdRnJyXfy+/38Z87KyuqFQ2eej/fy5csALxw+AU+/D05OToSEhBAaGkqjRo2oXLkyDRs2pF27dhQvXhyA4sWL895777FkyRI2bdqEr68v/v7+tG3b9qWncW/evKn+GH5W8nfn5s2b6oEXXvxdfNUtNjUaDdWqVePQoUMYjUaOHDlCwYIF1SEc1apV44cffgBSjqFO63vyova5u7unuLDxRfvOfPnypRje9fznOSN8fHxYvnw5kZGRHD16FJ1Op273atWqsWLFCp48eZKi7cmfs+f3ZTY2NhQvXjzFONjChQunGMp448YN3N3dsbOzMykvXbp0imWGhIQwZcoU6tati5eXF40aNaJdu3a4u7u/VvuTvc7x5I033kixH3BycuLs2bPq6xs3blCiRIkU9V70fr9I8ufy2fm1Wq3JD7PDhw8zd+5cjh07liI5jIuLw8HB4YX7CWdn5xf+cH+RFx3n3N3dcXR0THVMdHr5+vry008/ceXKFa5evYpGo8Hb2xtfX18OHTpEx44dOXToENWrV1ePhemNK7X9dvLx9fn37fnPaEb3c89r3rw5kydP5pdffmHgwIEoisK2bdto0KCBmvSndf+cmJhIfHy8OkQzvczxHX+Z+Ph4Bg8eTOHChZk6daq6jdOTdyTLyLC1bJmQZ6W03C3CaDRSt27dFGOokpUqVQqAggULsmHDBv744w9+//13fv/9d9atW0e7du2YMmVKhuIbPnw4R48epU+fPlSsWJECBQpgNBrp27dvqrcse9FVvKnVzQ6Sx7A/fvyYf//9l+DgYDw8PHB0dOTQoUNc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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_linear_regression_weights(bow_vectorizer_name, bow_vectorizer, bag_of_words_models)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ff213f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-12-14T10:00:06.067493Z",
     "iopub.status.busy": "2024-12-14T10:00:06.067014Z",
     "iopub.status.idle": "2024-12-14T10:00:06.103707Z",
     "shell.execute_reply": "2024-12-14T10:00:06.102560Z",
     "shell.execute_reply.started": "2024-12-14T10:00:06.067428Z"
    },
    "papermill": {
     "duration": 0.012463,
     "end_time": "2025-02-10T07:50:43.940031",
     "exception": false,
     "start_time": "2025-02-10T07:50:43.927568",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# TF-IDF Modelling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2d42358",
   "metadata": {
    "papermill": {
     "duration": 0.011773,
     "end_time": "2025-02-10T07:50:43.963803",
     "exception": false,
     "start_time": "2025-02-10T07:50:43.952030",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "This text preprocessing technique is similar to the bag of words approach, but instead divides each count (tf - text frequency) by the inverse of the frequency of that words among all documents (IDF - inverse document frequency).\n",
    "\n",
    "This means that any words that are common in a given text, but are also common among all texts, are given a smaller TF-IDF value. This is useful for common words that don't impart much meaning in text, but also for words specific to a certain domain, e.g. in our case the word \"tweet\" might appear in many tweets, but doesn't add much meaning itself so using tf-idf over bow takes this into account.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eea6a526",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:43.989142Z",
     "iopub.status.busy": "2025-02-10T07:50:43.988744Z",
     "iopub.status.idle": "2025-02-10T07:50:44.295818Z",
     "shell.execute_reply": "2025-02-10T07:50:44.294648Z"
    },
    "papermill": {
     "duration": 0.322776,
     "end_time": "2025-02-10T07:50:44.298455",
     "exception": false,
     "start_time": "2025-02-10T07:50:43.975679",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tfidf_vectorizer_name = 'tfidf_vectorizer'\n",
    "\n",
    "tfidf_vectorizer = TfidfVectorizer(max_features=2000)\n",
    "\n",
    "tfidf_vectorizer, X_train_tdidf, X_test_tdidf = create_vectorizer(tfidf_vectorizer_name, tfidf_vectorizer, X_train_raw, X_test_raw) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3527ad01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:44.324571Z",
     "iopub.status.busy": "2025-02-10T07:50:44.323591Z",
     "iopub.status.idle": "2025-02-10T07:50:46.110243Z",
     "shell.execute_reply": "2025-02-10T07:50:46.108901Z"
    },
    "papermill": {
     "duration": 1.802467,
     "end_time": "2025-02-10T07:50:46.112672",
     "exception": false,
     "start_time": "2025-02-10T07:50:44.310205",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression\n",
      "Best CV f1 Score: 0.719\n",
      "Test Set Accuracy Score: 0.788\n",
      "Test Set F1 Score: 0.734\n",
      "\n",
      "Random Forest\n",
      "Best CV f1 Score: 0.726\n",
      "Test Set Accuracy Score: 0.781\n",
      "Test Set F1 Score: 0.722\n",
      "\n",
      "XGBoost\n",
      "Best CV f1 Score: 0.701\n",
      "Test Set Accuracy Score: 0.755\n",
      "Test Set F1 Score: 0.695\n",
      "\n",
      "SVM\n",
      "Best CV f1 Score: 0.730\n",
      "Test Set Accuracy Score: 0.797\n",
      "Test Set F1 Score: 0.732\n",
      "\n",
      "Naive Bayes\n",
      "Best CV f1 Score: 0.735\n",
      "Test Set Accuracy Score: 0.811\n",
      "Test Set F1 Score: 0.752\n",
      "\n"
     ]
    }
   ],
   "source": [
    "tf_idf_model_name = 'tfidf_models'\n",
    "\n",
    "tf_idf_models = model_hyperparamter_tuning(models, tf_idf_model_name, X_train_tdidf, X_test_tdidf, y_train, y_test,cv=cv, n_iter=n_iter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "224630ab",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:46.138357Z",
     "iopub.status.busy": "2025-02-10T07:50:46.137949Z",
     "iopub.status.idle": "2025-02-10T07:50:46.961016Z",
     "shell.execute_reply": "2025-02-10T07:50:46.959677Z"
    },
    "papermill": {
     "duration": 0.838759,
     "end_time": "2025-02-10T07:50:46.963662",
     "exception": false,
     "start_time": "2025-02-10T07:50:46.124903",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ensemble Model\n",
      "Test Set Accuracy Score: 0.796\n",
      "Test Set F1 Score: 0.735\n",
      "\n"
     ]
    }
   ],
   "source": [
    "tf_idf_models = train_ensemble(tf_idf_models, tf_idf_model_name,  X_train_tdidf, X_test_tdidf, y_train, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b4a2731b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:46.993088Z",
     "iopub.status.busy": "2025-02-10T07:50:46.992686Z",
     "iopub.status.idle": "2025-02-10T07:50:47.109859Z",
     "shell.execute_reply": "2025-02-10T07:50:47.108560Z"
    },
    "papermill": {
     "duration": 0.135994,
     "end_time": "2025-02-10T07:50:47.112591",
     "exception": false,
     "start_time": "2025-02-10T07:50:46.976597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>model_params</th>\n",
       "      <th>cv_f1</th>\n",
       "      <th>test_accuracy</th>\n",
       "      <th>test_f1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>LogisticRegression(C=10, l1_ratio=0.1, max_ite...</td>\n",
       "      <td>{'max_iter': 500, 'l1_ratio': 0.1, 'C': 10}</td>\n",
       "      <td>0.719027</td>\n",
       "      <td>0.787919</td>\n",
       "      <td>0.734156</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>(DecisionTreeClassifier(max_depth=200, max_fea...</td>\n",
       "      <td>{'n_estimators': 100, 'min_samples_split': 10,...</td>\n",
       "      <td>0.725935</td>\n",
       "      <td>0.780696</td>\n",
       "      <td>0.722130</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>XGBClassifier(alpha=0, base_score=None, booste...</td>\n",
       "      <td>{'n_estimators': 1000, 'max_depth': 200, 'eta'...</td>\n",
       "      <td>0.700786</td>\n",
       "      <td>0.755089</td>\n",
       "      <td>0.694513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>SVC(C=1, gamma=1)</td>\n",
       "      <td>{'gamma': 1, 'C': 1}</td>\n",
       "      <td>0.730075</td>\n",
       "      <td>0.797111</td>\n",
       "      <td>0.731538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Naive Bayes</th>\n",
       "      <td>MultinomialNB(alpha=1)</td>\n",
       "      <td>{'alpha': 1}</td>\n",
       "      <td>0.734999</td>\n",
       "      <td>0.810900</td>\n",
       "      <td>0.752151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ensemble Model</th>\n",
       "      <td>VotingClassifier(estimators=[('Logistic Regres...</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>0.796454</td>\n",
       "      <td>0.734589</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 model  \\\n",
       "model_name                                                               \n",
       "Logistic Regression  LogisticRegression(C=10, l1_ratio=0.1, max_ite...   \n",
       "Random Forest        (DecisionTreeClassifier(max_depth=200, max_fea...   \n",
       "XGBoost              XGBClassifier(alpha=0, base_score=None, booste...   \n",
       "SVM                                                  SVC(C=1, gamma=1)   \n",
       "Naive Bayes                                     MultinomialNB(alpha=1)   \n",
       "Ensemble Model       VotingClassifier(estimators=[('Logistic Regres...   \n",
       "\n",
       "                                                          model_params  \\\n",
       "model_name                                                               \n",
       "Logistic Regression        {'max_iter': 500, 'l1_ratio': 0.1, 'C': 10}   \n",
       "Random Forest        {'n_estimators': 100, 'min_samples_split': 10,...   \n",
       "XGBoost              {'n_estimators': 1000, 'max_depth': 200, 'eta'...   \n",
       "SVM                                               {'gamma': 1, 'C': 1}   \n",
       "Naive Bayes                                               {'alpha': 1}   \n",
       "Ensemble Model                                                       -   \n",
       "\n",
       "                        cv_f1  test_accuracy   test_f1  \n",
       "model_name                                              \n",
       "Logistic Regression  0.719027       0.787919  0.734156  \n",
       "Random Forest        0.725935       0.780696  0.722130  \n",
       "XGBoost              0.700786       0.755089  0.694513  \n",
       "SVM                  0.730075       0.797111  0.731538  \n",
       "Naive Bayes          0.734999       0.810900  0.752151  \n",
       "Ensemble Model              -       0.796454  0.734589  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf_idf_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8edcfd38",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:47.138755Z",
     "iopub.status.busy": "2025-02-10T07:50:47.138289Z",
     "iopub.status.idle": "2025-02-10T07:50:47.605646Z",
     "shell.execute_reply": "2025-02-10T07:50:47.604374Z"
    },
    "papermill": {
     "duration": 0.483614,
     "end_time": "2025-02-10T07:50:47.608471",
     "exception": false,
     "start_time": "2025-02-10T07:50:47.124857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_linear_regression_weights(tfidf_vectorizer_name, tfidf_vectorizer, tf_idf_models)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d97fa05f",
   "metadata": {
    "papermill": {
     "duration": 0.013368,
     "end_time": "2025-02-10T07:50:47.642778",
     "exception": false,
     "start_time": "2025-02-10T07:50:47.629410",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Average Word Vectors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e9abb12",
   "metadata": {
    "papermill": {
     "duration": 0.014227,
     "end_time": "2025-02-10T07:50:47.672383",
     "exception": false,
     "start_time": "2025-02-10T07:50:47.658156",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Here we used a more advanced approach, average word vectors.\n",
    "\n",
    "Word vectors are trained representations of words that encode some meaning about the word in them. Because of this, you tend to find words with similar meaning having similar word vectors representations, e.g. \"good\" and \"great\". The idea with this approach is that the model can begin to learn what word vectors tend to correlate with disaster tweets. In more advanced model types, we can just input the sequence of word vectors into the model so that it can see each word vector individually (e.g. in RNNs). The problem with applying this to our simpler model types is that they expect an input of fixed length, and so sentences of varying length don't work.\n",
    "\n",
    "To get around this, we can average the word vectors across the whole sentence to get an input of fixed length (in our case a vector of length 300 given that is the length of our word vectors). Doing this does lose some of the meaning encoded within the individual word vectors, but the model should still be able to infer meaning from them.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c4b01498",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:47.700454Z",
     "iopub.status.busy": "2025-02-10T07:50:47.700037Z",
     "iopub.status.idle": "2025-02-10T07:50:47.707686Z",
     "shell.execute_reply": "2025-02-10T07:50:47.706461Z"
    },
    "papermill": {
     "duration": 0.024533,
     "end_time": "2025-02-10T07:50:47.709897",
     "exception": false,
     "start_time": "2025-02-10T07:50:47.685364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[MultinomialNB(), {'alpha': [0.001, 0.01, 0.1, 1]}]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models.pop('Naive Bayes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "640ff8c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:50:47.738118Z",
     "iopub.status.busy": "2025-02-10T07:50:47.737568Z",
     "iopub.status.idle": "2025-02-10T07:51:40.299780Z",
     "shell.execute_reply": "2025-02-10T07:51:40.298403Z"
    },
    "papermill": {
     "duration": 52.579553,
     "end_time": "2025-02-10T07:51:40.302532",
     "exception": false,
     "start_time": "2025-02-10T07:50:47.722979",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "wordvec_model = gensim.models.KeyedVectors.load_word2vec_format('/kaggle/input/word2vec/GoogleNews-vectors-negative300.bin', binary=True)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "f27ae93b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:40.330831Z",
     "iopub.status.busy": "2025-02-10T07:51:40.330400Z",
     "iopub.status.idle": "2025-02-10T07:51:40.338068Z",
     "shell.execute_reply": "2025-02-10T07:51:40.336918Z"
    },
    "papermill": {
     "duration": 0.02465,
     "end_time": "2025-02-10T07:51:40.340297",
     "exception": false,
     "start_time": "2025-02-10T07:51:40.315647",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def generate_word_vectors(wordvec_model, sentences):\n",
    "    average_word_vectors = []\n",
    "    non_model_words = []\n",
    "    empty_sentences = []\n",
    "    \n",
    "    for n, sentence in enumerate(sentences):\n",
    "    \n",
    "        vecs_mean = np.mean([wordvec_model[word.replace('#', '').replace('@', '')] for word in sentence if word.replace('#', '').replace('@', '') in wordvec_model], axis=0)\n",
    "        [non_model_words.append((n, word)) for word in sentence if word.replace('#', '').replace('@', '') not in wordvec_model]\n",
    "        if np.isnan(vecs_mean).any():\n",
    "            vecs_mean = np.zeros(300)\n",
    "            empty_sentences.append(sentence)\n",
    "            \n",
    "        average_word_vectors.append(vecs_mean)\n",
    "        \n",
    "    \n",
    "    word_vectors = np.array(average_word_vectors)\n",
    "\n",
    "    return word_vectors, non_model_words, empty_sentences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "ec708b19",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:40.369903Z",
     "iopub.status.busy": "2025-02-10T07:51:40.369461Z",
     "iopub.status.idle": "2025-02-10T07:51:41.245696Z",
     "shell.execute_reply": "2025-02-10T07:51:41.244368Z"
    },
    "papermill": {
     "duration": 0.894631,
     "end_time": "2025-02-10T07:51:41.248483",
     "exception": false,
     "start_time": "2025-02-10T07:51:40.353852",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n",
      "  return _methods._mean(a, axis=axis, dtype=dtype,\n",
      "/opt/conda/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    }
   ],
   "source": [
    "word_vectors, non_model_words, empty_sentences = generate_word_vectors(wordvec_model, train['tokens'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "343ef6c4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:41.277908Z",
     "iopub.status.busy": "2025-02-10T07:51:41.276502Z",
     "iopub.status.idle": "2025-02-10T07:51:41.288500Z",
     "shell.execute_reply": "2025-02-10T07:51:41.287180Z"
    },
    "papermill": {
     "duration": 0.029138,
     "end_time": "2025-02-10T07:51:41.291130",
     "exception": false,
     "start_time": "2025-02-10T07:51:41.261992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train_wv, X_test_wv, y_train_wv, y_test_wv = train_test_split(word_vectors, train['target'].values, test_size=0.2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbf9c363",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T11:08:40.449630Z",
     "iopub.status.busy": "2025-02-02T11:08:40.449291Z",
     "iopub.status.idle": "2025-02-02T11:08:40.477506Z",
     "shell.execute_reply": "2025-02-02T11:08:40.476561Z",
     "shell.execute_reply.started": "2025-02-02T11:08:40.449595Z"
    },
    "papermill": {
     "duration": 0.012764,
     "end_time": "2025-02-10T07:51:41.317171",
     "exception": false,
     "start_time": "2025-02-10T07:51:41.304407",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "scaler = MinMaxScaler()\n",
    "X_train_wv = scaler.fit_transform(X_train_wv)\n",
    "X_test_wv = scaler.transform(X_test_wv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "5f95205c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:41.345317Z",
     "iopub.status.busy": "2025-02-10T07:51:41.344781Z",
     "iopub.status.idle": "2025-02-10T07:51:42.036151Z",
     "shell.execute_reply": "2025-02-10T07:51:42.034937Z"
    },
    "papermill": {
     "duration": 0.708314,
     "end_time": "2025-02-10T07:51:42.038590",
     "exception": false,
     "start_time": "2025-02-10T07:51:41.330276",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression\n",
      "Best CV f1 Score: 0.751\n",
      "Test Set Accuracy Score: 0.784\n",
      "Test Set F1 Score: 0.741\n",
      "\n",
      "Random Forest\n",
      "Best CV f1 Score: 0.735\n",
      "Test Set Accuracy Score: 0.804\n",
      "Test Set F1 Score: 0.748\n",
      "\n",
      "XGBoost\n",
      "Best CV f1 Score: 0.756\n",
      "Test Set Accuracy Score: 0.806\n",
      "Test Set F1 Score: 0.760\n",
      "\n",
      "SVM\n",
      "Best CV f1 Score: 0.767\n",
      "Test Set Accuracy Score: 0.801\n",
      "Test Set F1 Score: 0.758\n",
      "\n"
     ]
    }
   ],
   "source": [
    "awv_model_name = 'avg_word_vec_models'\n",
    "\n",
    "wv_models = model_hyperparamter_tuning(models, awv_model_name, X_train_wv, X_test_wv, y_train_wv, y_test_wv, cv=cv, n_iter=n_iter)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67441d04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-02T11:08:41.262481Z",
     "iopub.status.busy": "2025-02-02T11:08:41.262151Z",
     "iopub.status.idle": "2025-02-02T11:08:41.267306Z",
     "shell.execute_reply": "2025-02-02T11:08:41.266163Z",
     "shell.execute_reply.started": "2025-02-02T11:08:41.262451Z"
    },
    "papermill": {
     "duration": 0.013724,
     "end_time": "2025-02-10T07:51:42.065803",
     "exception": false,
     "start_time": "2025-02-10T07:51:42.052079",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "if (wv_models.index == 'Naive Bayes').any():\n",
    "    wv_models = wv_models.drop('Naive Bayes', axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "332fcd50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:42.095255Z",
     "iopub.status.busy": "2025-02-10T07:51:42.094820Z",
     "iopub.status.idle": "2025-02-10T07:51:42.422569Z",
     "shell.execute_reply": "2025-02-10T07:51:42.421120Z"
    },
    "papermill": {
     "duration": 0.345557,
     "end_time": "2025-02-10T07:51:42.425212",
     "exception": false,
     "start_time": "2025-02-10T07:51:42.079655",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ensemble Model\n",
      "Test Set Accuracy Score: 0.810\n",
      "Test Set F1 Score: 0.757\n",
      "\n"
     ]
    }
   ],
   "source": [
    "wv_models = train_ensemble(wv_models, awv_model_name,  X_train_wv, X_test_wv, y_train_wv, y_test_wv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "2b44a89d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:42.453642Z",
     "iopub.status.busy": "2025-02-10T07:51:42.453193Z",
     "iopub.status.idle": "2025-02-10T07:51:42.549893Z",
     "shell.execute_reply": "2025-02-10T07:51:42.548598Z"
    },
    "papermill": {
     "duration": 0.114247,
     "end_time": "2025-02-10T07:51:42.552709",
     "exception": false,
     "start_time": "2025-02-10T07:51:42.438462",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>model</th>\n",
       "      <th>model_params</th>\n",
       "      <th>cv_f1</th>\n",
       "      <th>test_accuracy</th>\n",
       "      <th>test_f1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>model_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Logistic Regression</th>\n",
       "      <td>LogisticRegression(C=1, l1_ratio=0.3, max_iter...</td>\n",
       "      <td>{'max_iter': 200, 'l1_ratio': 0.3, 'C': 1}</td>\n",
       "      <td>0.750924</td>\n",
       "      <td>0.783979</td>\n",
       "      <td>0.741149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Random Forest</th>\n",
       "      <td>(DecisionTreeClassifier(max_depth=50, max_feat...</td>\n",
       "      <td>{'n_estimators': 200, 'min_samples_split': 20,...</td>\n",
       "      <td>0.735391</td>\n",
       "      <td>0.803677</td>\n",
       "      <td>0.747679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XGBoost</th>\n",
       "      <td>XGBClassifier(alpha=0, base_score=None, booste...</td>\n",
       "      <td>{'n_estimators': 1000, 'max_depth': 100, 'eta'...</td>\n",
       "      <td>0.755841</td>\n",
       "      <td>0.806303</td>\n",
       "      <td>0.760357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVM</th>\n",
       "      <td>SVC(C=10, gamma=0.1)</td>\n",
       "      <td>{'gamma': 0.1, 'C': 10}</td>\n",
       "      <td>0.766587</td>\n",
       "      <td>0.801051</td>\n",
       "      <td>0.757794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ensemble Model</th>\n",
       "      <td>VotingClassifier(estimators=[('Logistic Regres...</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>0.810243</td>\n",
       "      <td>0.756939</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                 model  \\\n",
       "model_name                                                               \n",
       "Logistic Regression  LogisticRegression(C=1, l1_ratio=0.3, max_iter...   \n",
       "Random Forest        (DecisionTreeClassifier(max_depth=50, max_feat...   \n",
       "XGBoost              XGBClassifier(alpha=0, base_score=None, booste...   \n",
       "SVM                                               SVC(C=10, gamma=0.1)   \n",
       "Ensemble Model       VotingClassifier(estimators=[('Logistic Regres...   \n",
       "\n",
       "                                                          model_params  \\\n",
       "model_name                                                               \n",
       "Logistic Regression         {'max_iter': 200, 'l1_ratio': 0.3, 'C': 1}   \n",
       "Random Forest        {'n_estimators': 200, 'min_samples_split': 20,...   \n",
       "XGBoost              {'n_estimators': 1000, 'max_depth': 100, 'eta'...   \n",
       "SVM                                            {'gamma': 0.1, 'C': 10}   \n",
       "Ensemble Model                                                       -   \n",
       "\n",
       "                        cv_f1  test_accuracy   test_f1  \n",
       "model_name                                              \n",
       "Logistic Regression  0.750924       0.783979  0.741149  \n",
       "Random Forest        0.735391       0.803677  0.747679  \n",
       "XGBoost              0.755841       0.806303  0.760357  \n",
       "SVM                  0.766587       0.801051  0.757794  \n",
       "Ensemble Model              -       0.810243  0.756939  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wv_models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "39a7dc5f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:42.581746Z",
     "iopub.status.busy": "2025-02-10T07:51:42.581321Z",
     "iopub.status.idle": "2025-02-10T07:51:42.590183Z",
     "shell.execute_reply": "2025-02-10T07:51:42.588850Z"
    },
    "papermill": {
     "duration": 0.026331,
     "end_time": "2025-02-10T07:51:42.592664",
     "exception": false,
     "start_time": "2025-02-10T07:51:42.566333",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_wv_cosine_similarities(vectorizer_name, vectorizer, models):\n",
    "\n",
    "    lr_weights = models.loc['Logistic Regression', 'model'].coef_[0]\n",
    "    vocab = vectorizer.get_feature_names_out()\n",
    "\n",
    "\n",
    "    vocab_words = [word.replace('#', '').replace('@', '') for word in vocab if word.replace('#', '').replace('@', '') in wordvec_model]\n",
    "    vocab_wv = [wordvec_model[word.replace('#', '').replace('@', '')] for word in vocab if word.replace('#', '').replace('@', '') in wordvec_model]\n",
    "\n",
    "    vocab_wv_cs = [1-cosine(wv, lr_weights) for wv in vocab_wv]\n",
    "    \n",
    "    linear_regression_cs = pd.DataFrame({'vocabulary': vocab_words\n",
    "             ,'logistic_regression_cs': vocab_wv_cs\n",
    "             }).sort_values(by='logistic_regression_cs')\n",
    "\n",
    "    top_bottom_10_slice = list(range(10)) + list(range(-10,0,1))\n",
    "\n",
    "    sns.barplot(data=linear_regression_cs.iloc[top_bottom_10_slice], y='vocabulary', x='logistic_regression_cs', orient=\"h\")\n",
    "    plt.title(f'Highest and Lowest Linear Regression Weight Words using {vectorizer_name}')\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50d422e5",
   "metadata": {
    "papermill": {
     "duration": 0.013688,
     "end_time": "2025-02-10T07:51:42.619888",
     "exception": false,
     "start_time": "2025-02-10T07:51:42.606200",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Because the inputs to the models no longer represent individual words, it's more difficult to analyse which words the model assigns highest/lowest weight to when trying to predict a disaster tweet. \n",
    "\n",
    "Instead, we can look at the weights assigned to each vector in the average word vector by our trained Logistic Regression model and compare that to the individual word vectors for words in our vocab. Any words that are very similar to the Logistic Regression weight vector, i.e. have positive values where the model's weights are positive and vice versa, will output a positive value for the logistic regression model and therefore be more likely to predict a disaster tweet when present in a sentence. Similarly, any words that are opposite to our Logistic Regression weight vector, i.e. have negative values where the model's weights are positive and vice versa, will output a negative value and therefore be less likely to predict a disaster tweet when present in a sentence.\n",
    "\n",
    "In order to measure the degree of similarity between the Logistic Regression's weight vector and the individual word vectors we can use the cosine similarity which measure the degree of similarity between 2 vectors, a positive value meaning high similarity and a negative value meaning opposite similarity.\n",
    "\n",
    "Below we can see that words like \"south\", \"airport\" and \"wildfire\" have the highest degree of similarity to the word vector representing the Logistic Regressions weights, and words like \"best\", \"bet\" and \"entertainment\" have the highest negative similarity.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f01b7c73",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:42.649503Z",
     "iopub.status.busy": "2025-02-10T07:51:42.649089Z",
     "iopub.status.idle": "2025-02-10T07:51:43.121084Z",
     "shell.execute_reply": "2025-02-10T07:51:43.119660Z"
    },
    "papermill": {
     "duration": 0.489386,
     "end_time": "2025-02-10T07:51:43.123558",
     "exception": false,
     "start_time": "2025-02-10T07:51:42.634172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_wv_cosine_similarities('test', tfidf_vectorizer, wv_models)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4ac41aa",
   "metadata": {
    "papermill": {
     "duration": 0.014185,
     "end_time": "2025-02-10T07:51:43.151971",
     "exception": false,
     "start_time": "2025-02-10T07:51:43.137786",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Make Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d8bff7b6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:43.182465Z",
     "iopub.status.busy": "2025-02-10T07:51:43.181946Z",
     "iopub.status.idle": "2025-02-10T07:51:50.353377Z",
     "shell.execute_reply": "2025-02-10T07:51:50.352296Z"
    },
    "papermill": {
     "duration": 7.18977,
     "end_time": "2025-02-10T07:51:50.355953",
     "exception": false,
     "start_time": "2025-02-10T07:51:43.166183",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "preprocessor.transform(test['text'], train=False)\n",
    "test['tokens'] = preprocessor.test_tokenized_text\n",
    "test['token_sentence'] = preprocessor.test_sentence_text"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3620524",
   "metadata": {
    "papermill": {
     "duration": 0.01838,
     "end_time": "2025-02-10T07:51:50.388923",
     "exception": false,
     "start_time": "2025-02-10T07:51:50.370543",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Average Word Vectors Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5442496b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:50.423603Z",
     "iopub.status.busy": "2025-02-10T07:51:50.423154Z",
     "iopub.status.idle": "2025-02-10T07:51:50.428588Z",
     "shell.execute_reply": "2025-02-10T07:51:50.427360Z"
    },
    "papermill": {
     "duration": 0.025136,
     "end_time": "2025-02-10T07:51:50.430856",
     "exception": false,
     "start_time": "2025-02-10T07:51:50.405720",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "avg_word_vec_ensemble = wv_models.loc['Ensemble Model','model']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "bc251448",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:50.462170Z",
     "iopub.status.busy": "2025-02-10T07:51:50.461660Z",
     "iopub.status.idle": "2025-02-10T07:51:54.604541Z",
     "shell.execute_reply": "2025-02-10T07:51:54.603389Z"
    },
    "papermill": {
     "duration": 4.161603,
     "end_time": "2025-02-10T07:51:54.607068",
     "exception": false,
     "start_time": "2025-02-10T07:51:50.445465",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/numpy/core/fromnumeric.py:3504: RuntimeWarning: Mean of empty slice.\n",
      "  return _methods._mean(a, axis=axis, dtype=dtype,\n",
      "/opt/conda/lib/python3.10/site-packages/numpy/core/_methods.py:129: RuntimeWarning: invalid value encountered in scalar divide\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    }
   ],
   "source": [
    "word_vectors_submission, _, _ = generate_word_vectors(wordvec_model, test['tokens'])\n",
    "#word_vectors_submission = scaler.transform(word_vectors_submission)\n",
    "sample_submission = pd.read_csv(\"/kaggle/input/nlp-getting-started/sample_submission.csv\")\n",
    "sample_submission[\"target\"] = avg_word_vec_ensemble.predict(word_vectors_submission)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e94715a3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-02-10T07:51:54.637793Z",
     "iopub.status.busy": "2025-02-10T07:51:54.637368Z",
     "iopub.status.idle": "2025-02-10T07:51:54.648634Z",
     "shell.execute_reply": "2025-02-10T07:51:54.647594Z"
    },
    "papermill": {
     "duration": 0.029365,
     "end_time": "2025-02-10T07:51:54.651172",
     "exception": false,
     "start_time": "2025-02-10T07:51:54.621807",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sample_submission.to_csv(\"submission.csv\", index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 869809,
     "sourceId": 17777,
     "sourceType": "competition"
    },
    {
     "datasetId": 6301605,
     "sourceId": 10198303,
     "sourceType": "datasetVersion"
    },
    {
     "isSourceIdPinned": true,
     "modelId": 238839,
     "modelInstanceId": 217124,
     "sourceId": 253950,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 119.103039,
   "end_time": "2025-02-10T07:51:56.795188",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-02-10T07:49:57.692149",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
